/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

lengthX 2.2;
lengthY 0.41;
cylinderX 0.2;
cylinderY 0.2;
radius 0.05;
midAngle 22.5;
xPartOfR #eval{ sqrt(2)/2 * $radius};

// jet specifications
jetWidth 10;  // jet width in degrees
jetCentre 90;  // jet centre in degrees
xPartOfJet #eval{ cos(degToRad($jetCentre - $jetWidth / 2)) * $radius};
yPartOfJet #eval{ sin(degToRad($jetCentre - $jetWidth / 2)) * $radius}; 
// jet intersection with top and lower boundaries
xPartOfJetBottom #eval{ cos(degToRad($jetCentre - $jetWidth / 2)) * $cylinderY};
xPartOfJetTop #eval{ cos(degToRad($jetCentre - $jetWidth / 2)) * ($lengthY-$cylinderY)};
// points are 22.5 degrees from the jet for arc definition
xPartofCyl #eval{ cos(degToRad($jetCentre - $midAngle)) * $radius};
yPartofCyl #eval{ sin(degToRad($jetCentre - $midAngle)) * $radius}; 

blocks_jet 5; // number of grid cells at the Jet by 2 pi * r * jetWidth / 360
jet_length #eval{ 2*3.14*$radius*$jetWidth / 360};
blocks_diag #eval{ floor( (sqrt($cylinderX*$cylinderX + $cylinderY*$cylinderY) - $radius) / $jet_length)};
blocks_y #eval{ floor(((90-($jetWidth/2))/$jetWidth) * $blocks_jet )};
blocks_x #eval{ floor((($lengthX-$cylinderX * 2)/ $lengthY) * $blocks_y )};
blocks_s #eval{ floor(($blocks_y-$blocks_jet)/2)};

thickness 0.01;

scale   1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points({
            /* 0*/ {0, 0, 0},
            /* 1*/ {$cylinderX - $xPartOfJetBottom, 0, 0},
            /* 2*/ {$cylinderX + $xPartOfJetBottom, 0, 0},
            /* 3*/ {$cylinderX * 2, 0, 0},
            /* 4*/ {$lengthX, 0, 0},
            /* 5*/ {$lengthX, $lengthY, 0},
            /* 6*/ {$cylinderX * 2, $lengthY, 0},
            /* 7*/ {$cylinderX + $xPartOfJetBottom, $lengthY, 0},
            /* 8*/ {$cylinderX - $xPartOfJetBottom, $lengthY, 0},
            /* 9*/ {0, $lengthY, 0},
            /* 10*/ {$cylinderX - $xPartOfR, $cylinderY - $xPartOfR, 0},
            /* 11*/ {$cylinderX - $xPartOfJet, $cylinderY - $yPartOfJet, 0},
            /* 12*/ {$cylinderX + $xPartOfJet, $cylinderY - $yPartOfJet, 0},
            /* 13*/ {$cylinderX + $xPartOfR, $cylinderY - $xPartOfR, 0},
            /* 14*/ {$cylinderX + $xPartOfR, $cylinderY + $xPartOfR, 0},
            /* 15*/ {$cylinderX + $xPartOfJet, $cylinderY + $yPartOfJet, 0},
            /* 16*/ {$cylinderX - $xPartOfJet, $cylinderY + $yPartOfJet, 0},
            /* 17*/ {$cylinderX - $xPartOfR, $cylinderY + $xPartOfR, 0}
        });

        // Duplicate z points for thickness
        const label sz = points.size();
        points.resize(2*sz);
        for (label i = 0; i < sz; ++i)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), $thickness);
        }

        os  << points;
    #};
};

blocks
(
    hex (0 1 11 10 18 19 29 28) ($blocks_s    $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (1 2 12 11 19 20 30 29) ($blocks_jet $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (2 3 13 12 20 21 31 30) ($blocks_s   $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (3 6 14 13 21 24 32 31) ($blocks_y   $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (6 7 15 14 24 25 33 32) ($blocks_s    $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (7 8 16 15 25 26 34 33) ($blocks_jet $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (8 9 17 16 26 27 35 34) ($blocks_s    $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (9 0 10 17 27 18 28 35) ($blocks_y    $blocks_diag 1) simpleGrading (1 0.25 1)
    hex (3 4 5  6  21 22 23 24) ($blocks_x    $blocks_y 1)     simpleGrading (2 1 1)
);

edges
(
    arc 11 12 ($cylinderX #eval{$cylinderY-$radius} 0)
    arc 13 14 (#eval{$cylinderX+$radius} $cylinderY 0)
    arc 15 16 ($cylinderX #eval{$cylinderY+$radius} 0)
    arc 17 10 (#eval{$cylinderX-$radius} $cylinderY 0)


    arc 29 30 ($cylinderX #eval{$cylinderY-$radius} $thickness)
    arc 31 32 (#eval{$cylinderX+$radius} $cylinderY $thickness)
    arc 33 34 ($cylinderX #eval{$cylinderY+$radius} $thickness)
    arc 35 28 (#eval{$cylinderX-$radius} $cylinderY $thickness)

    arc 10 11 (#eval{$cylinderX - $xPartofCyl} #eval{$cylinderY - $yPartofCyl} 0)
    arc 12 13 (#eval{$cylinderX + $xPartofCyl} #eval{$cylinderY - $yPartofCyl} 0)
    arc 14 15 (#eval{$cylinderX + $xPartofCyl} #eval{$cylinderY + $yPartofCyl} 0)
    arc 16 17 (#eval{$cylinderX - $xPartofCyl} #eval{$cylinderY + $yPartofCyl} 0)

    arc 28 29 (#eval{$cylinderX - $xPartofCyl} #eval{$cylinderY - $yPartofCyl} $thickness)
    arc 30 31 (#eval{$cylinderX + $xPartofCyl} #eval{$cylinderY - $yPartofCyl} $thickness)
    arc 32 33 (#eval{$cylinderX + $xPartofCyl} #eval{$cylinderY + $yPartofCyl} $thickness)
    arc 34 35 (#eval{$cylinderX - $xPartofCyl} #eval{$cylinderY + $yPartofCyl} $thickness)
);

boundary
(
    top
    {
        type patch;
        faces
        (
            (8 9 27 26)
            (7 8 26 25)
            (6 7 25 24)
            (5 6 24 23)
        );
    }
    bottom
    {
        type patch;
        faces
        (
            (0 1 19 18)
            (1 2 20 19)
            (2 3 21 20)
            (3 4 22 21)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (9 0 18 27)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (4 5 23 22)
        );
    }
    back
    {
        type empty;
        faces
        (
            (0 1 11 10)
            (1 2 12 11)
            (2 3 13 12)
            (3 6 14 13)
            (6 7 15 14)
            (7 8 16 15)
            (8 9 17 16)
            (9 0 10 17)
            (3 4 5 6)
        );
    }
    front
    {
        type empty;
        faces
        (
            (18 28 29 19)
            (19 29 30 20)
            (20 30 31 21)
            (21 31 32 24)
            (24 32 33 25)
            (25 33 34 26)
            (26 34 35 27)
            (27 35 28 18)
            (21 24 23 22) 
        );
    }
    cylinder_wall
    {
        type patch;
        faces
        (
            (10 11 29 28)
            (12 13 31 30)
            (13 14 32 31)
            (14 15 33 32)
            (16 17 35 34)
            (17 10 28 35)
        );
    }
    jet1
    {
        type patch;
        faces
        (
            (15 16 34 33)
        );
    }
    jet2
    {
        type patch;
        faces
        (
            (11 12 30 29)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
